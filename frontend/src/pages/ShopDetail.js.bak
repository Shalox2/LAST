import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '../contexts/AuthContext';

const ShopDetail = () => {
  const { id } = useParams();
  const { isAuthenticated, setUser } = useAuth();
  const navigate = useNavigate();
  const [shop, setShop] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState({ rating: 5, comment: '' });
  const [showCommentForm, setShowCommentForm] = useState(false);
  const [replyingTo, setReplyingTo] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showContactForm, setShowContactForm] = useState(false);
  const [contactInfo, setContactInfo] = useState({
    phone: '',
    message: 'I\'m interested in this product. Please contact me.'
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState({ success: false, message: '' });

  const handleProductSelect = (product) => {
    setSelectedProduct(product);
    setShowContactForm(true);
  };

  const handleContactSubmit = async (e) => {
    e.preventDefault();
    if (!isAuthenticated) {
      alert('Please log in to contact the seller');
      navigate('/login', { state: { from: window.location.pathname } });
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus({ success: false, message: '' });

    try {
      const token = localStorage.getItem('access_token');
      const response = await axios.post(
        `/api/shops/${id}/contact-seller/`,
        {
          product: selectedProduct.id,
          phone: contactInfo.phone,
          message: contactInfo.message
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );

      setSubmitStatus({
        success: true,
        message: 'Your inquiry has been sent to the seller. They will contact you soon.'
      });
      
      // Reset form after successful submission
      setContactInfo({ phone: '', message: '' });
      
      // Close the modal after 3 seconds
      setTimeout(() => {
        setShowContactForm(false);
        setSubmitStatus({ success: false, message: '' });
      }, 3000);
      
    } catch (error) {
      console.error('Error submitting inquiry:', error);
      let errorMessage = 'Failed to send your inquiry. Please try again.';
      
      if (error.response?.data?.error) {
        errorMessage = error.response.data.error;
      } else if (error.response?.data?.detail) {
        errorMessage = error.response.data.detail;
      }
      
      setSubmitStatus({
        success: false,
        message: errorMessage
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const categories = [
    { value: '', label: 'All Categories' },
    { value: 'electronics', label: 'Electronics' },
    { value: 'clothing', label: 'Fashion & Clothing' },
    { value: 'books', label: 'Books' },
    { value: 'home_garden', label: 'Home & Garden' },
    { value: 'sports', label: 'Sports' },
    { value: 'toys', label: 'Toys' },
    { value: 'beauty', label: 'Health & Beauty' },
    { value: 'automotive', label: 'Automotive' },
    { value: 'food', label: 'Food' },
    { value: 'other', label: 'Other' }
  ];

  const fetchShopDetails = useCallback(async () => {
    try {
      const response = await axios.get(`/api/shops/${id}/`);
      setShop(response.data);
    } catch (err) {
      setError('Failed to fetch shop details');
    }
  }, [id]);

  const fetchShopProducts = useCallback(async () => {
    try {
      const response = await axios.get(`/api/products/?shop=${id}`);
      setProducts(response.data.results || response.data);
    } catch (err) {
      console.error('Failed to fetch products');
    } finally {
      setLoading(false);
    }
  }, [id]);

  const fetchComments = useCallback(async () => {
    try {
      const response = await axios.get(`/api/shops/${id}/comments/`);
      // Ensure comments have a replies array and process the response
      const commentsData = Array.isArray(response.data) ? response.data : (response.data.results || []);
      const processedComments = commentsData.map(comment => ({
        ...comment,
        replies: comment.replies || []
      }));
      setComments(processedComments);
    } catch (err) {
      console.error('Failed to fetch comments:', err);
      if (err.response) {
        console.error('Error response:', err.response.data);
      }
    }
  }, [id]);

  useEffect(() => {
    fetchShopDetails();
    fetchShopProducts();
    fetchComments();
  }, [fetchShopDetails, fetchShopProducts, fetchComments]);


  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = !selectedCategory || product.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const generateStars = (rating) => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <span key={i} style={{ color: i <= rating ? '#ffd700' : '#ddd', fontSize: '16px' }}>
          ★
        </span>
      );
    }
    return stars;
  };

  // Reply submission is handled by the backend API directly

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    
    // Debug log
    console.log('Auth state - isAuthenticated:', isAuthenticated);
    console.log('Access token:', localStorage.getItem('access_token'));
    console.log('Refresh token:', localStorage.getItem('refresh_token'));
    
    // Check if user is authenticated
    if (!isAuthenticated) {
      console.log('User not authenticated, redirecting to login');
      alert('Please log in to post a review');
      navigate('/login', { state: { from: window.location.pathname } });
      return;
    }

    try {
      const token = localStorage.getItem('access_token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const user = JSON.parse(localStorage.getItem('user'));
      if (!user || !user.id) {
        throw new Error('User information not found');
      }

      console.log('Submitting comment with data:', {
        user_id: user.id,
        content: newComment.comment,
        shop: parseInt(id)
      });
      
      const response = await axios.post(
        `/api/shops/${id}/comments/`,
        {
          user_id: user.id,
          content: newComment.comment,
          shop: parseInt(id)
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      setComments([response.data, ...comments]);
      setNewComment({ rating: 5, comment: '' });
      setShowCommentForm(false);
      
    } catch (err) {
      console.error('Failed to submit comment:', err);
      let errorMessage = 'Failed to submit comment. ';
      
      if (err.response) {
        console.log('Error response data:', err.response.data);
        console.log('Error response status:', err.response.status);
        console.log('Error response headers:', err.response.headers);
        
        if (err.response.status === 400) {
          // Handle validation errors
          const errorData = err.response.data;
          if (typeof errorData === 'object' && errorData !== null) {
            // Format validation errors
            const errorMessages = [];
            for (const [key, value] of Object.entries(errorData)) {
              if (Array.isArray(value)) {
                errorMessages.push(`${key}: ${value.join(', ')}`);
              } else {
                errorMessages.push(`${key}: ${value}`);
              }
            }
            errorMessage += '\n' + errorMessages.join('\n');
          } else {
            errorMessage += err.response.data?.detail || 'Invalid request data';
          }
        } else if (err.response.status === 401) {
          errorMessage += 'Your session has expired. Please log in again.';
          // Clear any invalid tokens
          localStorage.removeItem('access_token');
          localStorage.removeItem('refresh_token');
          localStorage.removeItem('user');
          setUser(null);
          navigate('/login', { state: { from: window.location.pathname } });
        } else if (err.response.data) {
          // Show server-side validation errors if available
          const errors = Object.values(err.response.data).flat();
          errorMessage += errors.join('\n');
        } else {
          errorMessage += 'Please try again.';
        }
      } else {
        errorMessage += 'Network error. Please check your connection and try again.';
      }
      
      alert(errorMessage);
    }
  };

  const handleHelpfulVote = async (commentId, isHelpful) => {
    console.log('Voting functionality is currently disabled');
    // Voting is temporarily disabled to prevent errors
    return;
  };

  const getShopHeroImage = (shopName) => {
    const shopType = shopName.toLowerCase();
    if (shopType.includes('craft') || shopType.includes('handmade') || shopType.includes('artisan')) {
      return 'https://images.unsplash.com/photo-1452860606245-08befc0ff44b?w=1200&h=300&fit=crop';
    } else if (shopType.includes('tech') || shopType.includes('electronic')) {
      return 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=1200&h=300&fit=crop';
    } else if (shopType.includes('fashion') || shopType.includes('clothing')) {
      return 'https://images.unsplash.com/photo-1441984904996-e0b6ba687e04?w=1200&h=300&fit=crop';
    }
    return 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=1200&h=300&fit=crop';
  };

  if (loading) {
    return (
      <div className="container">
        <div className="loading">
          <div className="spinner"></div>
          <p>Loading shop details...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container">
        <div className="error">{error}</div>
      </div>
    );
  }

  if (!shop) {
    return (
      <div className="container">
        <div className="error">Shop not found</div>
      </div>
    );
  }

  return (
    <div style={{ backgroundColor: '#f8f9fa', minHeight: '100vh' }}>
      {/* Shop Hero Section */}
      <div style={{ position: 'relative', marginBottom: '40px' }}>
        <img 
          src={getShopHeroImage(shop.name)} 
          alt={shop.name}
          style={{ 
            width: '100%', 
            height: '300px', 
            objectFit: 'cover'
          }}
        />
        <div style={{
          position: 'absolute',
          bottom: '0',
          left: '0',
          right: '0',
          background: 'linear-gradient(transparent, rgba(0,0,0,0.7))',
          padding: '40px 20px 20px'
        }}>
          <div style={{ maxWidth: '1200px', margin: '0 auto', display: 'flex', alignItems: 'center', gap: '20px' }}>
            {shop.logo && (
              <img 
                src={shop.logo} 
                alt={`${shop.name} logo`}
                style={{ 
                  width: '80px', 
                  height: '80px', 
                  borderRadius: '50%', 
                  objectFit: 'cover',
                  border: '4px solid white',
                  boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
                }}
              />
            )}
            <div>
              <h1 style={{ 
                margin: '0 0 8px 0', 
                fontSize: '32px', 
                fontWeight: '700',
                color: 'white',
                textShadow: '2px 2px 4px rgba(0,0,0,0.5)'
              }}>
                {shop.name}
              </h1>
              <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                  {generateStars(4.8)}
                  <span style={{ color: 'white', fontSize: '14px', marginLeft: '4px' }}>4.8 (124 reviews)</span>
                </div>
                <span style={{
                  backgroundColor: shop.is_verified ? '#27ae60' : '#e74c3c',
                  color: 'white',
                  padding: '4px 12px',
                  borderRadius: '12px',
                  fontSize: '12px',
                  fontWeight: '600'
                }}>
                  {shop.is_verified ? '✓ Verified' : 'Not Verified'}
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 20px 40px' }}>
        {/* Shop Info */}
        <div style={{ 
          backgroundColor: 'white', 
          borderRadius: '12px', 
          padding: '24px', 
          marginBottom: '30px',
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '24px' }}>
            <div>
              <p style={{ 
                fontSize: '16px', 
                color: '#666', 
                lineHeight: '1.6',
                margin: '0 0 16px 0'
              }}>
                {shop.description || 'Latest electronics, gadgets, and tech accessories at competitive prices.'}
              </p>
              <div style={{ display: 'flex', gap: '24px', fontSize: '14px', color: '#7f8c8d' }}>
                <span>📍 {shop.business_address || 'Arusha, Tanzania'}</span>
                <span>📅 Joined {new Date(shop.created_at).toLocaleDateString()}</span>
                <span>👤 Owner: {shop.owner_username}</span>
              </div>
            </div>
            <div style={{ textAlign: 'center' }}>
              <div style={{ 
                fontSize: '24px', 
                fontWeight: '700', 
                color: '#2c3e50',
                marginBottom: '8px'
              }}>
                {products.length}
              </div>
              <div style={{ fontSize: '14px', color: '#7f8c8d' }}>
                products
              </div>
            </div>
          </div>
        </div>

        {/* Products Section */}
        <div style={{ marginBottom: '60px' }}>
          <h2 style={{ 
            fontSize: '24px', 
            marginBottom: '24px', 
            color: '#2c3e50',
            paddingBottom: '12px',
            borderBottom: '2px solid #f1f1f1'
          }}>
            Shop Products
          </h2>
          {products.length > 0 ? (
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))',
              gap: '24px',
              marginBottom: '40px'
            }}>
              {products.map(product => (
                <div 
                  key={product.id} 
                  onClick={() => handleProductSelect(product)}
                  style={{
                    textDecoration: 'none',
                    color: 'inherit',
                    display: 'block',
                    border: '1px solid #e0e0e0',
                    borderRadius: '12px',
                    overflow: 'hidden',
                    transition: 'transform 0.2s ease, box-shadow 0.2s ease',
                    backgroundColor: 'white',
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    cursor: 'pointer',
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: '0 6px 12px rgba(0,0,0,0.1)'
                    }
                  }}
                >
                  <div style={{ 
                    height: '200px', 
                    overflow: 'hidden',
                    position: 'relative'
                  }}>
                    <img 
                      src={product.image || 'https://via.placeholder.com/300x200?text=No+Image'} 
                      alt={product.name}
                      style={{
                        width: '100%',
                        height: '100%',
                        objectFit: 'cover',
                        transition: 'transform 0.3s ease'
                      }}
                    />
                  </div>
                  <div style={{ padding: '16px' }}>
                    <h3 style={{ 
                      margin: '0 0 8px 0', 
                      fontSize: '16px',
                      fontWeight: '600',
                      height: '40px',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis',
                      display: '-webkit-box',
                      WebkitLineClamp: 2,
                      WebkitBoxOrient: 'vertical'
                    }}>
                      {product.name}
                    </h3>
                    <div style={{ 
                      color: '#e67e22', 
                      fontWeight: '700',
                      fontSize: '18px',
                      marginBottom: '8px'
                    }}>
                      ${(Number(product.price) || 0).toFixed(2)}
                    </div>
                    <div style={{ 
                      display: 'flex', 
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      fontSize: '14px',
                      color: '#7f8c8d'
                    }}>
                      <span>In Stock: {product.stock || 0}</span>
                      <span>⭐ {product.rating || 'N/A'}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{
              backgroundColor: '#f8f9fa',
              padding: '40px 20px',
              borderRadius: '12px',
              textAlign: 'center',
              color: '#666',
              marginBottom: '40px'
            }}>
              <p style={{ margin: 0, fontSize: '16px' }}>No products available in this shop yet.</p>
            </div>
          )}
        </div>

        {/* Compact Comments Section */}
        <div style={{ padding: '20px 0', borderTop: '1px solid #eee' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
            <h2 style={{ margin: 0, color: '#333', fontSize: '20px' }}>
              Reviews ({comments.length})
            </h2>
            <button
              onClick={() => setShowCommentForm(!showCommentForm)}
              style={{
                padding: '12px 24px',
                backgroundColor: '#007bff',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer',
                fontSize: '16px',
                fontWeight: '500'
              }}
            >
              Write Review
            </button>
          </div>

          {/* Comment Form */}
          {showCommentForm && (
            <div style={{
              backgroundColor: 'white',
              padding: '20px',
              borderRadius: '8px',
              marginBottom: '20px',
              border: '1px solid #e9ecef'
            }}>
              <h3 style={{ marginBottom: '12px', color: '#333', fontSize: '18px' }}>Write Your Review</h3>
              <form onSubmit={handleCommentSubmit}>
                <div style={{ marginBottom: '15px' }}>
                  <div style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#555' }}>
                    Rating:
                  </div>
                  <div style={{ display: 'flex', gap: '5px', marginBottom: '10px' }}>
                    {[1, 2, 3, 4, 5].map(star => (
                      <span
                        key={star}
                        onClick={() => setNewComment({...newComment, rating: star})}
                        style={{
                          fontSize: '24px',
                          color: star <= newComment.rating ? '#ffd700' : '#ddd',
                          cursor: 'pointer'
                        }}
                      >
                        ★
                      </span>
                    ))}
                  </div>
                </div>
                <div style={{ marginBottom: '15px' }}>
                  <div style={{ display: 'block', marginBottom: '6px', fontWeight: '500', color: '#555' }}>
                    Your Review:
                  </div>
                  <textarea
                    value={newComment.comment}
                    onChange={(e) => setNewComment({...newComment, comment: e.target.value})}
                    placeholder="Share your experience..."
                    required
                    style={{
                      width: '100%',
                      minHeight: '80px',
                      padding: '10px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '14px',
                      resize: 'vertical'
                    }}
                  />
                </div>
                <div style={{ display: 'flex', gap: '10px' }}>
                  <button
                    type="submit"
                    style={{
                      padding: '8px 16px',
                      backgroundColor: '#28a745',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    Submit
                  </button>
                  <button
                    type="button"
                    onClick={() => setShowCommentForm(false)}
                    style={{
                      padding: '8px 16px',
                      backgroundColor: '#6c757d',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: 'pointer',
                      fontSize: '14px',
                      fontWeight: '500'
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          )}

          {/* Comments List */}
          <div style={{ marginBottom: '40px' }}>
            {comments.length === 0 ? (
              <div style={{
                textAlign: 'center',
                padding: '40px',
                color: '#666',
                backgroundColor: '#f8f9fa',
                borderRadius: '12px'
              }}>
                <p style={{ fontSize: '18px', margin: 0 }}>No reviews yet. Be the first to review this shop!</p>
              </div>
            ) : (
              comments.map(comment => (
                <div key={comment.id} style={{
                  backgroundColor: 'white',
                  padding: '16px',
                  marginBottom: '12px',
                  borderRadius: '8px',
                  border: '1px solid #e9ecef',
                  boxShadow: '0 1px 3px rgba(0,0,0,0.08)'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '8px' }}>
                    <div>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '6px' }}>
                        <span style={{ fontWeight: '600', color: '#333', fontSize: '15px' }}>
                          {comment.user_username}
                        </span>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '2px' }}>
                          {generateStars(comment.rating, '14px')}
                          {comment.is_verified_purchase && (
                            <span style={{
                              backgroundColor: '#28a745',
                              color: 'white',
                              padding: '2px 8px',
                              borderRadius: '10px',
                              fontSize: '12px',
                              fontWeight: '600'
                            }}>
                              Verified Purchase
                            </span>
                          )}
                        </div>
                      </div>
                      <p style={{ color: '#666', margin: '4px 0', lineHeight: '1.5', fontSize: '14px' }}>
                        {comment.comment}
                      </p>
                    </div>
                    <span style={{ color: '#999', fontSize: '13px' }}>
                      {new Date(comment.created_at).toLocaleDateString()}
                    </span>
                  </div>
                  
                  {/* Reply Button */}
                  <div style={{ display: 'flex', alignItems: 'center', gap: '16px', paddingTop: '12px', borderTop: '1px solid #f0f0f0' }}>
                    <button
                      onClick={() => {
                        setReplyingTo(replyingTo === comment.id ? null : comment.id);
                      }}
                      style={{
                        background: 'none',
                        border: 'none',
                        color: '#007bff',
                        cursor: 'pointer',
                        fontSize: '13px',
                        padding: '2px 6px',
                        marginTop: '4px',
                        display: 'inline-flex',
                        alignItems: 'center',
                        gap: '4px',
                        opacity: 0.8
                      }}
                    >
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                      </svg>
                      {replyingTo === comment.id ? 'Cancel' : 'Reply'}
                    </button>
                    
                    <span style={{ color: '#666', fontSize: '14px' }}>Was this helpful?</span>
                    <button
                      onClick={() => handleHelpfulVote(comment.id, true)}
                      style={{
                        background: 'none',
                        border: '1px solid #ddd',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        color: comment.user_found_helpful === true ? '#28a745' : '#666'
                      }}
                    >
                      👍 Yes ({comment.helpful_count || 0})
                    </button>
                    <button
                      onClick={() => handleHelpfulVote(comment.id, false)}
                      style={{
                        background: 'none',
                        border: '1px solid #ddd',
                        padding: '4px 12px',
                        borderRadius: '20px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        color: comment.user_found_helpful === false ? '#dc3545' : '#666'
                      }}
                    >
                      👎 No
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Add Review Button */}
        <div style={{ maxWidth: '1200px', margin: '20px auto', padding: '0 20px' }}>
          <button 
            onClick={() => {
              if (!isAuthenticated) {
                alert('Please log in to leave a review');
                navigate('/login', { state: { from: window.location.pathname } });
                return;
              }
              setShowCommentForm(!showCommentForm);
            }}
            style={{
              backgroundColor: isAuthenticated ? '#007bff' : '#6c757d',
              color: 'white',
              border: 'none',
              padding: '10px 20px',
              borderRadius: '5px',
              cursor: 'pointer',
              marginBottom: '20px',
              display: 'block',
              fontSize: '16px',
              fontWeight: '500',
              transition: 'background-color 0.2s',
              ':hover': {
                backgroundColor: isAuthenticated ? '#0056b3' : '#5a6268'
              }
            }}
          >
            {isAuthenticated 
              ? (showCommentForm ? 'Cancel' : 'Add a Review')
              : 'Log in to Review'}
          </button>

          {/* Review Form */}
          {showCommentForm && (
            <div style={{
              backgroundColor: '#fff',
              padding: '25px',
              borderRadius: '8px',
              marginBottom: '30px',
              border: '1px solid #e0e0e0',
              boxShadow: '0 2px 8px rgba(0,0,0,0.05)'
            }}>
              <h3 style={{ 
                marginTop: 0, 
                marginBottom: '20px',
                fontSize: '20px',
                color: '#333'
              }}>
                Write a Review
              </h3>
              <form onSubmit={handleCommentSubmit}>
                <div style={{ marginBottom: '20px' }}>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Rating:
                  </label>
                  <select 
                    value={newComment.rating}
                    onChange={(e) => setNewComment({...newComment, rating: parseInt(e.target.value)})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '6px',
                      border: '1px solid #ddd',
                      fontSize: '15px',
                      backgroundColor: '#fff',
                      cursor: 'pointer'
                    }}
                  >
                    {[5, 4, 3, 2, 1].map(num => (
                      <option key={num} value={num}>
                        {num} Star{num !== 1 ? 's' : ''}
                      </option>
                    ))}
                  </select>
                </div>
                <div style={{ marginBottom: '20px' }}>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Your Review:
                  </label>
                  <textarea
                    value={newComment.comment}
                    onChange={(e) => setNewComment({...newComment, comment: e.target.value})}
                    placeholder="Share your experience with this shop..."
                    style={{
                      width: '100%',
                      minHeight: '120px',
                      padding: '12px',
                      borderRadius: '6px',
                      border: '1px solid #ddd',
                      resize: 'vertical',
                      fontSize: '15px',
                      lineHeight: '1.5',
                      fontFamily: 'inherit'
                    }}
                    required
                  />
                </div>
                <button 
                  type="submit"
                  style={{
                    backgroundColor: '#28a745',
                    color: 'white',
                    border: 'none',
                    padding: '12px 24px',
                    borderRadius: '6px',
                    cursor: 'pointer',
                    fontSize: '16px',
                    fontWeight: '500',
                    transition: 'background-color 0.2s',
                    ':hover': {
                      backgroundColor: '#218838'
                    }
                  }}
                >
                  Submit Review
                </button>
              </form>
            </div>
          )}
        </div>

        {/* Search and Filter */}
        <div style={{ marginBottom: '30px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
            <h2 style={{ margin: 0, fontSize: '24px', fontWeight: '600' }}>
              Showing {filteredProducts.length} products
            </h2>
          </div>
          
          <div style={{ display: 'flex', gap: '16px', marginBottom: '20px' }}>
            <input
              type="text"
              placeholder="Search products in this shop..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{
                flex: 1,
                padding: '12px',
                border: '1px solid #ddd',
                borderRadius: '8px',
                fontSize: '14px'
              }}
            />
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              style={{
                padding: '12px',
                border: '1px solid #ddd',
                borderRadius: '8px',
                fontSize: '14px',
                minWidth: '200px'
              }}
            >
              {categories.map(cat => (
                <option key={cat.value} value={cat.value}>{cat.label}</option>
              ))}
            </select>
          </div>
        </div>
        
        {/* Products Grid */}
        {filteredProducts.length === 0 ? (
          <div style={{ 
            textAlign: 'center', 
            padding: '60px 20px',
            backgroundColor: 'white',
            borderRadius: '12px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
          }}>
            <p style={{ fontSize: '18px', color: '#666' }}>
              {searchTerm || selectedCategory ? 'No products match your search criteria.' : 'This shop has no products yet.'}
            </p>
          </div>
        ) : (
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', 
            gap: '24px' 
          }}>
            {filteredProducts.map(product => (
              <div key={product.id} style={{
                backgroundColor: 'white',
                borderRadius: '12px',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                overflow: 'hidden',
                transition: 'transform 0.2s, box-shadow 0.2s',
                cursor: 'pointer'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';
              }}>
                
                <div style={{ position: 'relative' }}>
                  {product.image ? (
                    <img 
                      src={product.image} 
                      alt={product.name}
                      style={{ 
                        width: '100%', 
                        height: '200px', 
                        objectFit: 'cover'
                      }}
                    />
                  ) : (
                    <div style={{
                      width: '100%',
                      height: '200px',
                      backgroundColor: '#f5f5f5',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#999'
                    }}>
                      No Image
                    </div>
                  )}
                  
                  <div style={{
                    position: 'absolute',
                    top: '12px',
                    right: '12px',
                    backgroundColor: 'rgba(255,255,255,0.9)',
                    borderRadius: '50%',
                    width: '32px',
                    height: '32px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    cursor: 'pointer'
                  }}>
                    ♡
                  </div>
                </div>
                
                <div style={{ padding: '16px' }}>
                  <h3 style={{ 
                    margin: '0 0 8px 0', 
                    fontSize: '16px', 
                    fontWeight: '600',
                    color: '#333',
                    lineHeight: '1.4'
                  }}>
                    {product.name}
                  </h3>
                  
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '8px',
                    marginBottom: '12px'
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center' }}>
                      {generateStars(4.5)}
                    </div>
                    <span style={{ fontSize: '14px', fontWeight: '600', color: '#333' }}>
                      4.5
                    </span>
                    <span style={{ fontSize: '12px', color: '#999' }}>
                      (89)
                    </span>
                  </div>
                  
                  <div style={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    marginBottom: '12px'
                  }}>
                    <div>
                      <span style={{ 
                        fontSize: '18px', 
                        fontWeight: '700', 
                        color: '#2c3e50'
                      }}>
                        ${product.price}
                      </span>
                    </div>
                    <span style={{
                      backgroundColor: categories.find(c => c.value === product.category)?.value === 'electronics' ? '#3498db' : 
                                     categories.find(c => c.value === product.category)?.value === 'clothing' ? '#e74c3c' : '#27ae60',
                      color: 'white',
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '12px',
                      fontWeight: '500'
                    }}>
                      {categories.find(c => c.value === product.category)?.label || product.category}
                    </span>
                  </div>
                  
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <Link 
                      to={`/products/${product.id}`}
                      style={{
                        flex: 1,
                        backgroundColor: 'white',
                        border: '1px solid #ddd',
                        color: '#333',
                        padding: '8px 12px',
                        borderRadius: '6px',
                        textDecoration: 'none',
                        textAlign: 'center',
                        fontSize: '14px',
                        fontWeight: '500',
                        transition: 'all 0.2s'
                      }}
                    >
                      View Details
                    </div>
                    <button style={{
                      flex: 1,
                      backgroundColor: '#3498db',
                      border: 'none',
                      color: 'white',
                      padding: '8px 12px',
                      borderRadius: '6px',
                      fontSize: '14px',
                      fontWeight: '500',
                      cursor: 'pointer',
                      transition: 'background-color 0.2s'
                    }}>
                      🛒
                    </button>
                  </div>
                  
                  <p style={{ 
                    margin: '8px 0 0 0', 
                    fontSize: '12px', 
                    color: '#27ae60',
                    fontWeight: '500'
                  }}>
                    {product.stock_quantity} in stock
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Contact Form Modal */}
      {showContactForm && selectedProduct && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          padding: '20px'
        }}>
          <div style={{
            backgroundColor: 'white',
            borderRadius: '12px',
            padding: '24px',
            width: '100%',
            maxWidth: '500px',
            maxHeight: '90vh',
            overflowY: 'auto',
            boxShadow: '0 4px 20px rgba(0,0,0,0.15)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '20px',
              paddingBottom: '12px',
              borderBottom: '1px solid #eee'
            }}>
              <h2 style={{ margin: 0, fontSize: '20px', color: '#333' }}>
                Contact Seller About This Product
              </h2>
              <button 
                onClick={() => {
                  setShowContactForm(false);
                  setSubmitStatus({ success: false, message: '' });
                }}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '24px',
                  cursor: 'pointer',
                  color: '#666',
                  '&:hover': {
                    color: '#333'
                  }
                }}
              >
                &times;
              </button>
            </div>

            <div style={{ marginBottom: '20px' }}>
              <h3 style={{ margin: '0 0 10px 0', fontSize: '16px', color: '#555' }}>Product:</h3>
              <div style={{ 
                display: 'flex', 
                gap: '16px',
                padding: '12px',
                backgroundColor: '#f8f9fa',
                borderRadius: '8px'
              }}>
                {selectedProduct.image && (
                  <img 
                    src={selectedProduct.image} 
                    alt={selectedProduct.name}
                    style={{
                      width: '80px',
                      height: '80px',
                      objectFit: 'cover',
                      borderRadius: '6px'
                    }}
                  />
                )}
                <div>
                  <h4 style={{ margin: '0 0 5px 0', fontSize: '16px' }}>{selectedProduct.name}</h4>
                  <p style={{ margin: '0', color: '#e67e22', fontWeight: 'bold' }}>
                    ${(Number(selectedProduct.price) || 0).toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            {submitStatus.message && (
              <div style={{
                padding: '12px',
                marginBottom: '20px',
                borderRadius: '6px',
                backgroundColor: submitStatus.success ? '#d4edda' : '#f8d7da',
                color: submitStatus.success ? '#155724' : '#721c24',
                border: `1px solid ${submitStatus.success ? '#c3e6cb' : '#f5c6cb'}`
              }}>
                {submitStatus.message}
              </div>
            )}

            {!submitStatus.success && (
              <form onSubmit={handleContactSubmit}>
                <div style={{ marginBottom: '16px' }}>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Your Phone Number *
                  </label>
                  <input
                    type="tel"
                    value={contactInfo.phone}
                    onChange={(e) => setContactInfo({...contactInfo, phone: e.target.value})}
                    required
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '15px',
                      '&:focus': {
                        borderColor: '#80bdff',
                        outline: 'none',
                        boxShadow: '0 0 0 0.2rem rgba(0,123,255,0.25)'
                      }
                    }}
                    placeholder="Enter your phone number"
                  />
                </div>

                <div style={{ marginBottom: '20px' }}>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: '#555'
                  }}>
                    Message to Seller
                  </label>
                  <textarea
                    value={contactInfo.message}
                    onChange={(e) => setContactInfo({...contactInfo, message: e.target.value})}
                    rows="4"
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      border: '1px solid #ddd',
                      borderRadius: '6px',
                      fontSize: '15px',
                      resize: 'vertical',
                      '&:focus': {
                        borderColor: '#80bdff',
                        outline: 'none',
                        boxShadow: '0 0 0 0.2rem rgba(0,123,255,0.25)'
                      }
                    }}
                  />
                </div>

                <div style={{ display: 'flex', gap: '12px' }}>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    style={{
                      flex: 1,
                      padding: '12px',
                      backgroundColor: isSubmitting ? '#6c757d' : '#28a745',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      fontSize: '16px',
                      fontWeight: '500',
                      cursor: isSubmitting ? 'not-allowed' : 'pointer',
                      opacity: isSubmitting ? 0.7 : 1,
                      transition: 'all 0.2s'
                    }}
                  >
                    {isSubmitting ? 'Sending...' : 'Send Message to Seller'}
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowContactForm(false);
                      setSubmitStatus({ success: false, message: '' });
                    }}
                    style={{
                      padding: '0 16px',
                      backgroundColor: '#f8f9fa',
                      color: '#6c757d',
                      border: '1px solid #dee2e6',
                      borderRadius: '6px',
                      fontSize: '16px',
                      fontWeight: '500',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      ':hover': {
                        backgroundColor: '#e9ecef'
                      }
                    }}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default ShopDetail;
